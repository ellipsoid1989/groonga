table_create Entries TABLE_NO_KEY
[[0,0.0,0.0],true]
column_create Entries content COLUMN_SCALAR ShortText
[[0,0.0,0.0],true]
load --table Entries
[
{"content": "groonga は転置索引を用いた高速・高精度な全文検索エンジンであり、登録された文書をすぐに検索結果に反映できます。また、参照をブロックせずに更新できることから、即時更新の必要なアプリケーションにおいても高い性能を発揮します。\n\n全文検索エンジンとして開発された groonga ですが、独自のカラムストアを持つ列指向のデータベースとしての側面も持っています。そのため、MySQL や PostgreSQL など、既存の代表的なデータベースが苦手とする集計クエリを高速に処理できるという特徴があり、組み合わせによって弱点を補うような使い方もできます。\n\ngroonga の基本機能は C ライブラリとして提供されていますが、MySQL や PostgreSQL と連携させたり、Ruby から呼び出したりすることもできます。そのため、任意のアプリケーションに組み込むことが可能であり、多様な使い方が考えられます。 興味のある方は 利用例 をご覧ください。"},
{"content": "一般的なデータベースにおいては、追加・削除などの操作がすぐに反映されます。一方、全文検索においては、転置索引が逐次更新の難しいデータ構造であることから、文書の追加・削除に対応しないエンジンが少なくありません。\n\nこれに対し、転置索引を用いた全文検索エンジンでありながら、groonga は文書を短時間で追加・削除することができます。その上、更新しながらでも検索できるという優れた特徴を持っているため、全文検索エンジンとしてはとても柔軟性があります。また、複数の転置索引を統合するような重い処理を必要としないので、安定して高い性能を発揮することが期待できます。"},
{"content": "現代は、インターネットを情報源とすれば、いくらでも情報を収集できる時代です。しかし、膨大な情報から有益な情報を引き出すのは困難であり、多面的な分析による試行錯誤が必要となります。たとえば、日付や時間帯により絞り込んでみたり、地域により絞り込んでみたり、性別や年齢により絞り込んでみたりすることでしょう。そして、そのようなときに便利な存在が集計クエリです。\n\n集計クエリとは、指定したカラムの値によってレコードをグループ化し、各グループに含まれるレコードの数を求めるクエリです。たとえば、地域の ID を格納しているカラムを指定すれば、地域毎のレコード数が求まります。日付のカラムを指定したときの出力をグラフ化すれば、レコード数の時間変化を視覚化することができます。さらに、地域による絞り込みと日付に対する集計クエリを組み合わせれば、特定の地域におけるレコード数の時間変化を視覚化ことも可能です。このように、尺度を自由に選択して絞り込み・集計できることは、膨大な情報を扱う上でとても重要になります。\n\ngroonga が集計クエリを高速に処理できる理由は、データベースの論理構造にカラムストアを採用しているからです。集計クエリが参照するのは指定されたカラムのみであるため、カラム単位でデータを格納する列指向のデータベースでは、必要なカラムのみを無駄なく読み出せることが利点となります。一方、レコード単位でデータを格納する行指向のデータベースでは、隣接するカラムをまとめて読み出してしまうことが欠点となります。"}
]
[[0,0.0,0.0],3]
select Entries   --output_columns '   snippet(content,   "groonga", "転置", "索引", "高速", "制度", "全文", "検索", "エンジン", "登録", "文書",   "結果", "反映", "また", "参照", "ブロック", "更新", "即時", "必要", "アプリケーション", "高い",   "性能", "発揮", "独自", "カラム", "ストア", "列指向", "側面", "SQL", "代表的", "苦手",   "特徴", "組み合わせ", "弱点", "補う", "基本機能", "ライブラリ", "Ruby", "多様", "興味", "利用例",   "一般的", "データベース", "追加", "削除", "操作", "一方", "逐次", "難しい", "データ構造", "少なく",   "柔軟性", "短時間", "インターネット", "いくら", "収集", "膨大", "有益", "困難", "多面的", "試行錯誤",   "日付", "時間帯", "絞り", "地域", "性別", "年齢", "レコード", "グループ", "グラフ", "時間変化",   {     "default_open_tag": "[",     "default_close_tag": "]",     "width" : 2048   })'
[
  [
    0,
    0.0,
    0.0
  ],
  [
    [
      [
        3
      ],
      [
        [
          "snippet",
          null
        ]
      ],
      [
        [
          "[groonga] は[転置][索引]を用いた[高速]・高精度な[全文][検索][エンジン]であり、[登録]された[文書]をすぐに[検索][結果]に[反映]できます。[また]、[参照]を[ブロック]せずに[更新]できることから、[即時][更新]の[必要]な[アプリケーション]においても[高い][性能]を[発揮]します。\n\n[全文][検索][エンジン]として開発された [groonga] ですが、[独自]の[カラム][ストア]を持つ[列指向]の[データベース]としての[側面]も持っています。そのため、My[SQL] や Postgre[SQL] など、既存の[代表的]な[データベース]が[苦手]とする集計クエリを[高速]に処理できるという[特徴]があり、[組み合わせ]によって[弱点]を[補う]ような使い方もできます。\n\n[groonga] の[基本機能]は C [ライブラリ]として提供されていますが、My[SQL] や Postgre[SQL] と連携させたり、[Ruby] から呼び出したりすることもできます。そのため、任意の[アプリケーション]に組み込むことが可能であり、[多様]な使い方が考えられます。 [興味]のある方は [利用例] をご覧ください。"
        ]
      ],
      [
        [
          "[一般的]な[データベース]においては、[追加]・[削除]などの[操作]がすぐに[反映]されます。[一方]、[全文][検索]においては、[転置][索引]が[逐次][更新]の[難しい][データ構造]であることから、[文書]の[追加]・[削除]に対応しない[エンジン]が[少なく]ありません。\n\nこれに対し、[転置][索引]を用いた[全文][検索][エンジン]でありながら、[groonga] は[文書]を[短時間]で[追加]・[削除]することができます。その上、[更新]しながらでも[検索]できるという優れた[特徴]を持っているため、[全文][検索][エンジン]としてはとても[柔軟性]があります。[また]、複数の[転置][索引]を統合するような重い処理を[必要]としないので、安定して[高い][性能]を[発揮]することが期待できます。"
        ]
      ],
      [
        [
          "現代は、[インターネット]を情報源とすれば、[いくら]でも情報を[収集]できる時代です。しかし、[膨大]な情報から[有益]な情報を引き出すのは[困難]であり、[多面的]な分析による[試行錯誤]が[必要]となります。たとえば、[日付]や[時間帯]により[絞り]込んでみたり、[地域]により[絞り]込んでみたり、[性別]や[年齢]により[絞り]込んでみたりすることでしょう。そして、そのようなときに便利な存在が集計クエリです。\n\n集計クエリとは、指定した[カラム]の値によって[レコード]を[グループ]化し、各[グループ]に含まれる[レコード]の数を求めるクエリです。たとえば、[地域]の ID を格納している[カラム]を指定すれば、[地域]毎の[レコード]数が求まります。[日付]の[カラム]を指定したときの出力を[グラフ]化すれば、[レコード]数の[時間変化]を視覚化することができます。さらに、[地域]による[絞り]込みと[日付]に対する集計クエリを[組み合わせ]れば、特定の[地域]における[レコード]数の[時間変化]を視覚化ことも可能です。このように、尺度を自由に選択して[絞り]込み・集計できることは、[膨大]な情報を扱う上でとても重要になります。\n\n[groonga] が集計クエリを[高速]に処理できる理由は、[データベース]の論理構造に[カラム][ストア]を採用しているからです。集計クエリが[参照]するのは指定された[カラム]のみであるため、[カラム]単位でデータを格納する[列指向]の[データベース]では、[必要]な[カラム]のみを無駄なく読み出せることが利点となります。[一方]、[レコード]単位でデータを格納する行指向の[データベース]では、隣接する[カラム]をまとめて読み出してしまうことが欠点となります。"
        ]
      ]
    ]
  ]
]
